<snippet>
    <content><![CDATA[
-behaviour(gen_fsm).

% API
-export([start_link/0]).

% States
-export([state_a/2, state_a/3,
         state_b/2, state_b/3]).

% gen_fsm
-export([init/1, handle_event/3, handle_sync_event/4, handle_info/3,
         terminate/3, code_change/4]).

-record(state, {}).

%% ====================================================================
%% API
%% ====================================================================

start_link() ->
  io:format("$1:start_link()~n", []),
  gen_fsm:start_link(?MODULE, [], []).

%% ====================================================================
%% States
%% ====================================================================
$0
state_a(goto_state_b, StateData) ->
  io:format("$1:state_a/2~n"),
  {next_state, state_b, StateData}.

state_a(goto_state_b, {_Pid, _Tag}, StateData) ->
  io:format("$1:state_a/3~n"),
  {reply, ok, state_b, StateData}.

state_b(goto_state_a, StateData) ->
  io:format("$1:state_b/2~n"),
  {next_state, state_a, StateData}.

state_b(goto_state_a, {_Pid, _Tag}, StateData) ->
  io:format("$1:state_b/3~n"),
  {reply, ok, state_a, StateData}.

%% ====================================================================
%% gen_fsm
%% ====================================================================

% -----------------
% init
% -----------------

init([]) ->
  io:format("$1:init(), PID [~p]~n", [self()]),
  {ok, state_a, #state{}}.

% -----------------
% handle_event
% -----------------

handle_event(Event, StateName, StateData) ->
  io:format("$1:handle_event(~p, ~p, ~p)~n",[Event, StateName, StateData]),
  {next_state, StateName, StateData}.

% -----------------
% handle_sync_event
% -----------------

handle_sync_event(Event, From, StateName, StateData) ->
  io:format("$1:handle_sync_event(~p, ~p, ~p, ~p)~n",[Event, From, StateName, StateData]),
  {next_state, StateName, StateData}.

% -----------------
% handle_info
% -----------------

handle_info(Info, StateName, StateData) ->
  io:format("$1:handle_info(~p, ~p, ~p)~n", [Info, StateName, StateData]),
  {next_state, StateName, StateData}.

% -----------------
% terminate
% -----------------

terminate(_Reason, _StateName, _StateData) ->
  io:format("$1:terminate()~n"),
  ok.

% -----------------
% code_change
% -----------------

code_change(OldVsn, StateName, StateData, Extra) ->
  io:format("$1:code_change(~p, ~p, ~p, ~p)~n", [OldVsn, StateName, StateData, Extra]),
  {ok, StateName, StateData}.

]]>
</content>
    <tabTrigger>gen_fsm</tabTrigger>
    <scope>source.erlang</scope>
    <description>gen_fsm stub</description>
</snippet>
