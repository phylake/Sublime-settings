<snippet>
    <content><![CDATA[
-behaviour(gen_server).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-export([
start_link/0
]).

-record(state, {$0}).

%% ====================================================================
%% API
%% ====================================================================

start_link() ->
  lager:info("$1:start_link()~n", []),
  gen_server:start_link(?MODULE, [], []).

%% ====================================================================
%% gen_server
%% ====================================================================

% -----------
% init
% -----------

init([]) ->
  lager:info("$1:init(), PID [~p]~n", [self()]),
  {ok, #state{}}.

% -----------
% handle_call
% -----------

handle_call(Request, From, State) ->
  lager:error("$1:handle_call(~p, ~p, ~p)~n",[Request, From, State]),
  {stop, fell_through, State}.

% -----------
% handle_cast
% -----------

handle_cast(Msg, State) ->
  lager:error("$1:handle_cast(~p, ~p)~n",[Msg, State]),
  {stop, fell_through, State}.

% -----------
% handle_info
% -----------

handle_info(Info, State) ->
  lager:error("$1:handle_info(~p, ~p)~n", [Info, State]),
  {stop, fell_through, State}.

% -----------
% terminate
% -----------

terminate(_Reason, _State) ->
  lager:info("$1:terminate()~n"),
  ok.

% -----------
% code_change
% -----------

code_change(OldVsn, State, Extra) ->
  lager:info("$1:code_change(~p, ~p, ~p)~n", [OldVsn, State, Extra]),
  {ok, State}.

]]>
</content>
    <tabTrigger>gen_server</tabTrigger>
    <scope>source.erlang</scope>
    <description>gen_server stub</description>
</snippet>
